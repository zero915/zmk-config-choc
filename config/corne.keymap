/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        tp: tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_PREFERRED";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <125>;
            quick-tap-ms = <200>;
        };

        shifthr: shifthr {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFTHR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <185>;
            flavor = "tap-preferred";
            quick-tap-ms = <185>;
        };

        weak: weak {
            compatible = "zmk,behavior-hold-tap";
            label = "WEAK";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <230>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <125>;
            quick-tap-ms = <230>;
        };

        backspace: backspace {
            compatible = "zmk,behavior-tap-dance";
            label = "BACKSPACE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp LC(BACKSPACE)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        jk_fix {
            bindings = <&kp ESCAPE>;
            key-positions = <31 32>;
        };

        under {
            bindings = <&kp UNDER>;
            key-positions = <28 31>;
        };

        dash {
            bindings = <&kp MINUS>;
            key-positions = <4 7>;
        };

        Clear_BLE_Profile {
            bindings = <&bt BT_CLR>;
            key-positions = <0 38 5>;
        };

        Space {
            bindings = <&kp SPACE>;
            key-positions = <29 28>;
        };

        Enter {
            bindings = <&kp ENTER>;
            key-positions = <17 16>;
        };

        Capslock {
            bindings = <&kp CAPS>;
            key-positions = <5 6>;
        };

        BT_next {
            bindings = <&bt BT_NXT>;
            key-positions = <5 38 1>;
            layers = <0>;
            timeout-ms = <0>;
            require-prior-idle-ms = <0>;
        };

        escape {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };
    };

    macros {
        save: save {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp ESCAPE &kp COLON &kp W &kp ENTER>;

            label = "SAVE";
        };

        email: email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp B &kp R &kp Y &kp A &kp N &kp AT &kp P &kp E &kp C &kp J &kp O &kp DOT &kp C &kp O &kp M>;
            label = "EMAIL";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP  |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  | LWR/' |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | RSE/ESC   |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y    &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp RCTRL  &kp A  &kp S  &kp D     &kp F  &kp G        &kp H    &kp J  &kp K      &kp L    &kp SEMI  &lt 1 SQT
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N    &kp M  &kp COMMA  &kp DOT  &kp FSLH  &lt 2 ESC
                         &kp LGUI  &mo 1  &kp SPACE    &kp RET  &mo 2  &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB  |  !  |  @  |  {  |  }  | "|" |   |  +  |  7  |  8  |  9  |  *  | Del |
            // | EP_ON |  #  |  $  |  (  |  )  |  `  |   |  -  |  4  |  5  |  6  |  ;  | Ins |
            // |  CAPS |  %  |  ^  |  [  |  ]  |  ~  |   |  =  |  1  |  2  |  3  |  \  | ESC |
            //                     | GUI |     | SPC |   | ENT |  .  |  0  |

            bindings = <
&kp TAB           &kp EXCL     &kp AT      &kp LBRC  &kp RBRC  &kp PIPE     &kp PLUS   &kp N7   &kp N8  &kp N9  &kp STAR  &kp DEL
&ext_power EP_ON  &kp HASH     &kp DOLLAR  &kp LPAR  &kp RPAR  &kp GRAVE    &kp MINUS  &kp N4   &kp N5  &kp N6  &kp SEMI  &kp INS
&kp CAPS          &kp PERCENT  &kp CARET   &kp LBKT  &kp RBKT  &kp TILDE    &kp EQUAL  &kp N1   &kp N2  &kp N3  &kp BSLH  &kp ESC
                                           &kp LGUI  &trans    &kp SPACE    &kp RET    &kp DOT  &kp N0
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |   |  F1  |  F2  |  F3 |  F4  | email |   |    | HOME |  ▲   | END | PG_UP |        |
            // |   |  F5  |  F6  |  F7 |  F8  | ^V ^C |   |    |  ◄   |  ▼   |  ►  | PG_DN | EP_TOG |
            // |   |  F9  |  F10 | F11 | F12  | PSCRN |   | ^R | ^ T  | ^⇧ T |     |       |        |
            //                   |     |      |       |   |    |      |  |

            bindings = <
&trans  &kp F1            &kp F2           &kp F3        &kp F4             &email             &trans    &kp HOME    &kp UP          &kp END    &kp PG_UP     &trans
&trans  &hm LEFT_META F5  &hm LEFT_ALT F6  &hm LCTRL F7  &hm LEFT_SHIFT F8  &hm LC(V) LC(C)    &trans    &kp LEFT    &kp DOWN        &kp RIGHT  &kp PAGE_DOWN &ext_power EP_TOG
&trans  &kp F9            &kp F10          &kp F11       &kp F12            &kp PSCRN          &kp LC(R) &kp LC(TAB) &kp LC(RS(TAB)) &trans     &trans        &trans
                                           &trans        &trans             &trans             &trans    &trans      &trans
            >;
        };

        extended_layer {
            // -----------------------------------------------------------------------------------------
            // |     |     |     | Prv | Nxt | P/P |   | Vol-  | Vol+  | Mute |       |    |    |
            // |     |     |     |     |     |     |   | Bri-  | Bri+  |      |       |    |    |
            // | BTX | BT1 | BT2 | BT3 | BT4 | BT5 |   | alt-L | alt-R | ^Tab | ^⇧Tab |    |    |
            //                         |     |     |   |       |       |      |       |

            label = "EXT";
            bindings = <
&trans      &trans        &trans        &kp K_PREV    &kp K_NEXT    &kp K_PP        &kp C_VOL_DN          &kp C_VOL_UP          &kp K_MUTE   &trans           &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans          &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp LC(T)    &kp LC(LS(T))    &trans  &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LA(LEFT)          &kp LA(RIGHT)         &kp LC(TAB)  &kp LC(RS(TAB))  &trans  &trans
                                    &trans        &trans        &trans          &trans                &trans                &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Activate_EXT {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
